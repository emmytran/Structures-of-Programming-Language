// Run this program through the Oz interpreter by calling
//    runFull "declarative" "Sem1.txt" "Sem1.out"
// Explain the resulting store

local X in
  local Y in
    X = 1
    Y = pair(1:X 2:X)
    case Y of pair(1:Z 2:W) then 
      local S in 
        {IntPlus Z W S}
        skip Full
      end
      else
        skip Basic
    end
  end
end

/*
-------- Sem1.out --------
[local ["X"] [local ["Y"] [X = 1,local ["EXU1","EXU2"] [EXU1 = X,EXU2 = X,Y = pair(1:EXU1 2:EXU2)], 
case Y of pair(1:Z 2:W) then [local ["S"] [local ["EXU1","EXU2","EXU3"] [EXU1 = Z,EXU2 = W,EXU3 = S,
"IntPlus" "EXU1" "EXU2" "EXU3"],skip/f]] else [skip]]]]

-------- Sem1.txt --------
*Hoz> runFull "declarative" "Sem1.txt" "Sem1.out"
Store :
((15, 12), 2),            ------> There are two S, first one, variable "S" been created, 
                                  ((12),unbound), then IntPlus Z W S, "S"-> ((15,12),2)
((14, 13, 11, 10, 8), 1), ------> At first, "X" been created ((8),unbound), 
                                  and then X=1, "X" ->((8),1), then united X to pair.1 and pair.2,
                                  then we have "X" -> ((11,10,8),1), eventually, in IntPlus Z W S, 
                                  we got "X"->((14,13,11,10,8),1)
((9), pair(1:10 2:11)),  -------> At first, "Y" been created ((9),unbound), 
                                  then it bound to pair (1:X 2:X), so we got "Y" -> ((9), pair(1:10 2:11))
((1), Primitive Operation),	    	represents IntPlus
((2), Primitive Operation),		    represents IntMinus
((3), Primitive Operation),		    represents Eq
((4), Primitive Operation),		    represents GT
((5), Primitive Operation),		    represents LT
((6), Primitive Operation),		    represents Mod
((7), Primitive Operation)		    represents IntMultiply

Mutable Store: Empty
Current Environment : ("S" -> 12, "Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, 
"IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
Stack : ""

--------- Takeaways ---------
- For the environment, program set up primitive operations, and then add them to environment.
Environment: ( "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, 
"IntMultiply" -> 7 )

- Local X and local Y created variable X and variable Y and then add them to environment
Environment: ( "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, 
"LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

- Case Y of pair (1:Z 2:W) created variables Z and W and then add them to environment
Environment: ("Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3,
"GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

- "local S in.." created variable S, and then add them to environment
Environment : ("S" -> 12, "Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, 
"IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

- The program assigns a variable x = 1, and then assign another variable y to a pair, y = (1, 1)
- Then sum the first element and the second element of this pair
- Then ssigns the result to a variable S, and S will be 2 (first + second = 1 + 1).

- Once "local X in ..." executed, "X" -> ((8),unbound)

- Once "local Y in ..." executed, "Y" -> ((9),unbound)

- Once "X=1" executed, "X" -> ((8),1)

- Once "Y = pair(1:X 2:X)" executed, "Y" -> ((9), pair (1:10,2:11))
- There is also "pair.1" -> ((10),1), "pair.2" -> ((11),1), "X" -> ((11,10,8),1)

- Since Z and W are not local variables, we only assign the values to them instead of creating a new store location,
the Z and W is the "pair.1" and "pair.2" in "Y" -> ((9), pair (1:10, 2:11)),so we have "Z" -> ((10),1) "W" -> ((11),1). 

- Once "local S in {IntPlus Z W S}" executed, local S created a variable S first and assigned it a store location, "S" -> ((12),unbound)
- Then "IntPlus Z W S" simply operater two arguments and save the result in S
"IntPlus Z W S" actually does S= Z IntPlus W, for those Z, W, and S, program created new store location for them.

- Hence we got "Z" -> ((13),1), "W" -> ((14),1), "S" -> ((15,12),unbound)
- Therefore, S= Z "+" W = 1 + 1 = 2, "S" -> ((15,12),2)
- And "X" -> ((14,13,11,10,8),1)
*/