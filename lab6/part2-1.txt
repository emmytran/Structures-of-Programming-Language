local Producer OddFilter Consumer N L P F S in
    Producer = proc {$ N Limit Out}
    if (N<Limit) then T N1 in       //condition checking
        Out = (N|T)                 //set return
        N1 = (N + 1)                //counter incrementer 
        {Producer N1 Limit T}       
    else Out = nil                  //complete the list with null
    end
    end

    OddFilter = proc {$ P Out}
        case P 
            of nil then Out = nil         //base case
            [] '|'(1:X 2:Xr) then
            if({Mod X 2} == 0) then T in
                Out = (X|T)               //ressult
                {OddFilter Xr T}            
            else
                {OddFilter Xr Out}        //get rest of list if odd case
            end
        end
    end

    // Example Testing
    N = 0             //begin of the list
    L = 101           //set the last element to 101 (we can only reach 100)
    {Producer N L P}  // [0 1 2 .. 100]
    {OddFilter P F}   // [0 2 4 .. 100]
    {Consumer P S}
    skip Browse F                              
    skip Browse S
end